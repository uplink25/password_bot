import os.path
import random
import time
# from background import keep_alive
from config import tg_bot_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from string import ascii_letters, ascii_uppercase
from random import sample
from aiogram.utils.markdown import hbold, hunderline, hitalic, hcode

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

l_min = 4
l_max = 24


def generate_pass(pass_length):
    abc = ascii_letters  # –≤—Å–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –±–æ–ª—å—à–∏–µ
    number = '1234567890'
    special = '[]{}()!@#$%^&*'
    # —Å–æ–µ–¥–∏–Ω–∏–º –≤—Å–µ, —Å–¥–µ–ª–∞–≤ –±—É–∫–≤ —á—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤
    all_symbols = (abc * 4 + number + special) * 4
    # —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π –Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞ –º–µ–Ω—å—à–µ...
    password = sample(all_symbols, pass_length - 3)
    # ..–¥–æ–±–∞–≤–∏–º –æ–¥–Ω—É –±–æ–ª—å—à—É—é –±—É–∫–≤—É
    password.append(random.choice(ascii_uppercase))
    # ..–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É
    password.append(random.choice(number))
    # ..–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
    password.append(random.choice(special))
    # –∏ –≤—Å—ë –ø–µ—Ä–µ–º–µ—à–∞–µ–º
    random.shuffle(password)
    # –∞ –ø–æ—Ç–æ–º —Å–æ–µ–¥–∏–Ω–∏–º –≤ —Ç—Ä–æ–∫—É
    password = ''.join(password)
    return password


@dp.message_handler(commands=['minmax'])
async def minmax_command(message: types.Message):
    global l_min, l_max
    c, a, b = message.text.split()
    if int(a) < 4:
        await message.reply(
            '–ö–∞–∫ –Ω–∏ –∫—Ä—É—Ç–∏, –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤. ü§∑‚Äç')
    l_min = int(a)
    l_max = int(b)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç. –ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ.')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer(
        f'–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∞—Ä–æ–ª–∏ –æ—Ç {l_min} –¥–æ {l_max} —Å–∏–º–≤–æ–ª–æ–≤.\n'
        f'–ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º, –≤–≤–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É'
        f' "/minmax n m" , –≥–¥–µ n - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, m –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–æ–ª—è'
    )


@dp.message_handler()
async def get_password(message: types.Message):
    pass_length = message.text

    try:
        pass_length = int(pass_length)
        if pass_length > l_max or pass_length < l_min:
            # file_path = os.path.join()
            print('demo-media/pics/nelzya.jpg')
            caption = f'–ù–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –≤–∑—è—Ç—å –∏ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –º–µ–Ω—å—à–µ {hcode(l_min)} –∏–ª–∏ –±–æ–ª—å—à–µ {hcode(l_max)}'
            await bot.send_photo(message.chat.id,
                                 open('demo-media/pics/nelzya.jpg', 'rb'),
                                 caption=caption)
        else:
            password = generate_pass(pass_length)
            await message.answer('–ß—É—Ç–æ—á–∫—É —Ç–µ—Ä–ø–µ–Ω–∏—è) –ì–µ–Ω–µ—Ä–∏—Ä—É—é...')
            time.sleep(2)
            await message.answer(f'–í–∞—à –ø–∞—Ä–æ–ª—å: {password}')
            await bot.send_photo(message.chat.id, open('demo-media/pics/ok.jpg', 'rb'))
    except Exception as ex2:
        print(ex2)
        await message.answer(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –æ—Ç {l_min} –¥–æ {l_max}')


if __name__ == '__main__':
    executor.start_polling(dp)
